<?xml version="1.0" encoding="UTF-8" ?>

<schema name="default-config" version="1.6">

    
  <!-- The StrField type is not analyzed, but indexed/stored verbatim. -->
  <fieldType name="string" class="solr.StrField" sortMissingLast="true" docValues="true"/>
  <fieldType name="strings" class="solr.StrField" sortMissingLast="true" multiValued="true" docValues="true"/>

  <!-- boolean type: "true" or "false" -->
  <fieldType name="boolean" class="solr.BoolField" sortMissingLast="true"/>
  <fieldType name="booleans" class="solr.BoolField" sortMissingLast="true" multiValued="true"/>

  <!-- date field types -->
  <fieldType name="pdate" class="solr.DatePointField" docValues="true"/>
  <fieldType name="pdates" class="solr.DatePointField" docValues="true" multiValued="true"/>
  
  <!--
      Numeric field types that index values using KD-trees.
      Point fields don't support FieldCache, so they must have docValues="true" if needed for sorting, faceting, functions, etc.
    -->
  <fieldType name="pint" class="solr.IntPointField" docValues="true"/>
  <fieldType name="pfloat" class="solr.FloatPointField" docValues="true"/>
  <fieldType name="plong" class="solr.LongPointField" docValues="true"/>
  <fieldType name="pdouble" class="solr.DoublePointField" docValues="true"/>

  <fieldType name="pints" class="solr.IntPointField" docValues="true" multiValued="true"/>
  <fieldType name="pfloats" class="solr.FloatPointField" docValues="true" multiValued="true"/>
  <fieldType name="plongs" class="solr.LongPointField" docValues="true" multiValued="true"/>
  <fieldType name="pdoubles" class="solr.DoublePointField" docValues="true" multiValued="true"/>
  <fieldType name="random" class="solr.RandomSortField" indexed="true"/>


  <!-- A text field that only splits on whitespace for exact matching of words -->
  <dynamicField name="*_ws" type="text_ws" indexed="true" stored="true"/>
  <fieldType name="text_ws" class="solr.TextField" positionIncrementGap="100">
    <analyzer>
      <tokenizer class="solr.WhitespaceTokenizerFactory"/>
    </analyzer>
  </fieldType>

  <!-- A general text field that has reasonable, generic
         cross-language defaults: it tokenizes with StandardTokenizer,
	       removes stop words from case-insensitive "stopwords.txt"
	       (empty by default), and down cases.  At query time only, it
	       also applies synonyms.
	  -->
  <fieldType name="text_general" class="solr.TextField" positionIncrementGap="100" multiValued="true">
    <analyzer type="index">
      <tokenizer class="solr.StandardTokenizerFactory"/>
      <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
      <filter class="solr.LowerCaseFilterFactory"/>
    </analyzer>
    <analyzer type="query">
      <tokenizer class="solr.StandardTokenizerFactory"/>
      <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
      <filter class="solr.SynonymGraphFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
      <filter class="solr.LowerCaseFilterFactory"/>
    </analyzer>
  </fieldType>
  

  <!-- N-GRAM FIELDS -->
  
  <!-- N-grams for exact matching -->
  <fieldType name="ngramTextField" class="solr.TextField" multiValued="true" termVectors="true" termPositions="true" termOffsets="true" >
    <analyzer type="index">
      <tokenizer class="solr.NGramTokenizerFactory" minGramSize="2" maxGramSize="15"/>
    </analyzer>
    <analyzer type="query">
      <!-- Queries are not tokenized into N-grams; otherwise also partial matches will count -->
      <tokenizer class="solr.StandardTokenizerFactory"/>
    </analyzer>
  </fieldType>

  <fieldType name="edgeNgramTextField" class="solr.TextField" multiValued="true" termVectors="true" termPositions="true" termOffsets="true" >
    <!-- match at string beginning only -->
    <analyzer type="index">
      <tokenizer class="solr.EdgeNGramTokenizerFactory" minGramSize="2" maxGramSize="15"/>
    </analyzer>
    <analyzer type="query">
      <tokenizer class="solr.StandardTokenizerFactory"/>
    </analyzer>
  </fieldType>
  

  <!-- N-grams ignoring any repeated notes / unison intervals -->
  <fieldType name="ngramIgnoreRepeatedNote" class="solr.TextField" multiValued="true" termVectors="true" termPositions="true" termOffsets="true" >
    <analyzer type="index">
      <!-- Skip any repeated characters (= repeated notes) -->
      <charFilter class="solr.PatternReplaceCharFilterFactory" replacement="$1" pattern="(\S)\1{1,}"/>  
      <tokenizer class="solr.NGramTokenizerFactory" minGramSize="2" maxGramSize="15"/>
    </analyzer>
    <analyzer type="query">
      <!-- Also skip repeated characters in query -->
      <charFilter class="solr.PatternReplaceCharFilterFactory" replacement="$1" pattern="(\S)\1{1,}"/>  
      <!-- Queries are not tokenized into N-grams; otherwise also partial matches will count -->
      <tokenizer class="solr.StandardTokenizerFactory"/>
    </analyzer>
  </fieldType>

  <fieldType name="edgeNgramIgnoreRepeatedNote" class="solr.TextField" multiValued="true" termVectors="true" termPositions="true" termOffsets="true" >
    <!-- match at string beginning only -->
    <analyzer type="index">
      <!-- Skip any repeated characters (= repeated notes) -->
      <charFilter class="solr.PatternReplaceCharFilterFactory" replacement="$1" pattern="(\S)\1{1,}"/>  
      <tokenizer class="solr.EdgeNGramTokenizerFactory" minGramSize="2" maxGramSize="15"/>
    </analyzer>
    <analyzer type="query">
      <charFilter class="solr.PatternReplaceCharFilterFactory" replacement="$1" pattern="(\S)\1{1,}"/>  
      <tokenizer class="solr.StandardTokenizerFactory"/>
    </analyzer>
  </fieldType>
  

  <fieldType name="ngramIgnoreUnison" class="solr.TextField" multiValued="true" termVectors="true" termPositions="true" termOffsets="true" >
    <analyzer type="index">
      <!-- Filter out character "Z" (= interval 0 / unison) -->
      <charFilter class="solr.PatternReplaceCharFilterFactory" replacement="" pattern="Z+"/>  
      <tokenizer class="solr.NGramTokenizerFactory" minGramSize="1" maxGramSize="14"/>
    </analyzer>
    <analyzer type="query">
      <!-- Also skip "Z" in query -->
      <charFilter class="solr.PatternReplaceCharFilterFactory" replacement="" pattern="Z+"/>  
      <!-- Queries are not tokenized into N-grams; otherwise also partial matches will count -->
      <tokenizer class="solr.StandardTokenizerFactory"/>
    </analyzer>
  </fieldType>
  
  <fieldType name="edgeNgramIgnoreUnison" class="solr.TextField" multiValued="true" termVectors="true" termPositions="true" termOffsets="true" >
    <!-- match at string beginning only -->
    <analyzer type="index">
      <charFilter class="solr.PatternReplaceCharFilterFactory" replacement="" pattern="Z+"/>  
      <tokenizer class="solr.EdgeNGramTokenizerFactory" minGramSize="1" maxGramSize="14"/>
    </analyzer>
    <analyzer type="query">
      <charFilter class="solr.PatternReplaceCharFilterFactory" replacement="" pattern="Z+"/>  
      <tokenizer class="solr.StandardTokenizerFactory"/>
    </analyzer>
  </fieldType>


  <!-- Copy fields for searches ignoring repeated notes -->
  <copyField source="abs_pitch" dest="abs_pitch_norepeat"/>
  <copyField source="transposition" dest="transposition_norepeat"/>
  <copyField source="intervals" dest="intervals_norepeat"/>
    
  <!-- Copy fields for edge ngram search (to match beginning only) -->
  <copyField source="abs_pitch" dest="abs_pitch_edge"/>
  <copyField source="abs_pitch" dest="abs_pitch_norepeat_edge"/>
  <copyField source="transposition" dest="transposition_edge"/>
  <copyField source="transposition" dest="transposition_norepeat_edge"/>
  <copyField source="intervals" dest="intervals_edge"/>
  <copyField source="intervals" dest="intervals_norepeat_edge"/>
    
  <!--<field name="abs_pitch" type="string" indexed="true" stored="true"/>-->
  <field name="abs_pitch" type="ngramTextField" indexed="true" stored="true"/>
  <field name="abs_pitch_edge" type="edgeNgramTextField" indexed="true" stored="true"/>
  <field name="abs_pitch_norepeat" type="ngramIgnoreRepeatedNote" indexed="true" stored="true"/>
  <field name="abs_pitch_norepeat_edge" type="edgeNgramIgnoreRepeatedNote" indexed="true" stored="true"/>
  <field name="collection" type="string" indexed="false" stored="true"/>
  <field name="contour" type="ngramTextField" indexed="true" stored="true"/>
  <field name="duration" type="string" indexed="true" stored="true"/>
  <field name="file" type="string" indexed="false" stored="true"/>
  <field name="id" type="string" multiValued="false" indexed="true" required="true" stored="true"/>
  <field name="ids" type="string" indexed="true" stored="true"/>
  <field name="intervals" type="ngramTextField" indexed="true" stored="true"/>
  <field name="intervals_edge" type="edgeNgramTextField" indexed="true" stored="true"/>
  <field name="intervals_norepeat" type="ngramIgnoreUnison" indexed="true" stored="true"/>
  <field name="intervals_norepeat_edge" type="edgeNgramIgnoreUnison" indexed="true" stored="true"/>
  <field name="pitch" type="ngramTextField" indexed="true" stored="true"/>
  <field name="publ" type="string" indexed="true" stored="true"/>
  <field name="title" type="text_general" indexed="true" stored="true"/>
  <field name="transposition" type="ngramTextField" indexed="true" stored="true"/>
  <field name="transposition_edge" type="edgeNgramTextField" indexed="true" stored="true"/>
  <field name="transposition_norepeat" type="ngramIgnoreRepeatedNote" indexed="true" stored="true"/>
  <field name="transposition_norepeat_edge" type="edgeNgramIgnoreRepeatedNote" indexed="true" stored="true"/>
  
  <!-- Field to use to determine and enforce document uniqueness.
    Unless this field is marked with required="false", it will be a required field
  -->
  <uniqueKey>id</uniqueKey>
  
  
  
  <!-- Similarity is the scoring routine for each document vs. a query.
    A custom Similarity or SimilarityFactory may be specified here, but 
    the default is fine for most applications.  
    For more info: http://lucene.apache.org/solr/guide/other-schema-elements.html#OtherSchemaElements-Similarity
  -->
  <!--
    <similarity class="com.example.solr.CustomSimilarityFactory">
    <str name="paramkey">param value</str>
    </similarity>
  -->
  
  <!-- Enable similarity scoring per field -->
  <!--<similarity class="solr.SchemaSimilarityFactory"/>-->
  
  <!-- Change default similarity scoring -->
  <!-- Options: see https://subscription.packtpub.com/book/big_data_and_business_intelligence/9781783553150/1/ch01lvl1sec22/changing-similarity -->
  <!--<similarity class="solr.BM25SimilarityFactory"/>-->
  <!-- 
    <similarity class="solr.DFRSimilarityFactory">
    <str name="basicModel">P</str>
    <str name="afterEffect">L</str>
    <str name="normalization">H2</str>
    <float name="c">7</float>
    </similarity>
  -->
  <!--<similarity class="solr.SweetSpotSimilarityFactory">
    <float name="baselineTfMin">6.0</float>
    <float name="baselineTfBase">1.5</float>
    <int name="lengthNormMin">3</int>
    <int name="lengthNormMax">5</int>
    <float name="lengthNormSteepness">0.5</float>
    </similarity>-->  
  

</schema>
